---
services:

  mysql:
    image: mysql/mysql-server:8.0
    hostname: mysql
    container_name: mysql
    ports:
      - 3306:3306
    healthcheck: { test: mysql -pmysql1234 -e 'select 1', interval: 10s, start_period: 120s }
    environment:
      - MYSQL_ROOT_PASSWORD=mysql1234
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysql1234
    volumes:
      - ./mysql/mysql.cnf:/etc/mysql/conf.d
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql/data:/var/lib/mysql-files/data
    networks:
      - simplydemo

  # Sets up a multi-node Kafka cluster w/ 3 brokers w/ the following listeners:
  #  - kafka1 listening (external/internal): localhost:9092 / kafka1:29092
  #  - kafka2 listening (external/internal): localhost:9093 / kafka2:29092
  #  - kafka3 listening (external/internal): localhost:9094 / kafka3:29092
  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 101
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka1:29092,CONTROLLER://kafka1:29093,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka1:29092,EXTERNAL://localhost:9092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "101@kafka1:29093,102@kafka2:29093,103@kafka3:29093"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG4J_LOGGERS: "org.apache.kafka.image.loader.MetadataLoader=WARN"
      KAFKA_AUTO_CREATE_TOPICS: false
      CLUSTER_ID: 'UIiE2lHFQMEN7NSE17MA'
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9092" ]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - simplydemo

  kafka2:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 102
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka2:29092,CONTROLLER://kafka2:29093,EXTERNAL://0.0.0.0:9093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka2:29092,EXTERNAL://localhost:9093'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "101@kafka1:29093,102@kafka2:29093,103@kafka3:29093"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG4J_LOGGERS: "org.apache.kafka.image.loader.MetadataLoader=WARN"
      KAFKA_AUTO_CREATE_TOPICS: false
      CLUSTER_ID: 'UIiE2lHFQMEN7NSE17MA'
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9093" ]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - simplydemo

  kafka3:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka3
    hostname: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 103
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka3:29092,CONTROLLER://kafka3:29093,EXTERNAL://0.0.0.0:9094'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka3:29092,EXTERNAL://localhost:9094'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "101@kafka1:29093,102@kafka2:29093,103@kafka3:29093"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG4J_LOGGERS: "org.apache.kafka.image.loader.MetadataLoader=WARN"
      KAFKA_AUTO_CREATE_TOPICS: false
      CLUSTER_ID: 'UIiE2lHFQMEN7NSE17MA'
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9094" ]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - simplydemo

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:29092,kafka2:29092,kafka3:29092'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - simplydemo

  #  kafka-init-topics:
  #    image: confluentinc/cp-kafka:7.8.0
  #    command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #             cub kafka-ready -b kafka0:29092 1 30 && \
  #             kafka-topics --create --topic second.users    --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka1:29092 && \
  #             kafka-topics --create --topic second.messages --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka1:29092 && \
  #             kafka-topics --create --topic first.messages  --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka1:29092 && \
  #             kafka-console-producer --bootstrap-server kafka0:29092 --topic second.users < /data/message.json'"
  #    volumes:
  #      - ./message.json:/data/message.json
  #    networks:
  #      - simplydemo
  #    depends_on:
  #      - schema-registry
  #      - kafka1
  #      - kafka2
  #      - kafka3

  connect:
    image: debezium/connect:3.0.0.Final
    container_name: debezium-connect
    ports:
      - 8083:8083
    healthcheck: { test: curl -f localhost:8083, interval: 20s, start_period: 120s }
    environment:
      - GROUP_ID=1
      - BOOTSTRAP_SERVERS=kafka1:29092,kafka2:29092,kafka3:29092
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
      - STATUS_STORAGE_TOPIC=connect_offsets
      - CONNECT_PLUGIN_PATH=/kafka/connect
      - CONNECT_REST_ADVERTISED_HOST_NAME=connect
      - CONNECT_REST_PORT=8083
    restart: always
    # for adding local kafka plugins
    volumes:
      - ./connect/plugins:/kafka/connect/debezium-connector-simplydemo:ro
    networks:
      - simplydemo
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      mysql:
        condition: service_healthy

  debezium-ui:
    image: debezium/debezium-ui:2.1.2.Final
    container_name: debezium-ui
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CONNECT_URIS=http://connect:8083
    depends_on:
      connect:
        condition: service_healthy
    networks:
      - simplydemo

#  kafka-ui:
#    image: provectuslabs/kafka-ui:master
#    user: "${UID}:${GID}"
#    restart: unless-stopped
#    ports:
#      - "48081:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29092,kafka3:29092
#      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
#    deploy:
#      resources:
#        limits:
#          memory: 256M
#    networks:
#      - simplydemo
#    depends_on:
#      kafka1:
#        condition: service_healthy
#      kafka2:
#        condition: service_healthy
#      kafka3:
#        condition: service_healthy
#      connect:
#        condition: service_healthy

#
#  ksqldb-server:
#    image: confluentinc/ksqldb-server:0.29.0
#    hostname: ksqldb-server
#    container_name: ksqldb-server
#    ports:
#      - "8088:8088"
#    environment:
#      KSQL_LISTENERS: http://0.0.0.0:8088
#      KSQL_BOOTSTRAP_SERVERS: 'kafka1:29092,kafka2:29092,kafka3:29092'
#      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
#      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
#    networks:
#      - simplydemo
#    depends_on:
#      - schema-registry
#      - kafka1
#      - kafka2
#      - kafka3
#
#  ksqldb-cli:
#    image: confluentinc/ksqldb-cli:0.29.0
#    container_name: ksqldb-cli
#    depends_on:
#      - ksqldb-server
#    entrypoint: /bin/sh
#    tty: true
#    networks:
#      - simplydemo
#

volumes:
  kafka-data:

networks:
  simplydemo:
    name: simplydemo
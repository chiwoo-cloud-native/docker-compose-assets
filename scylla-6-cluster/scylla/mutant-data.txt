-- mutant-data.txt

CREATE KEYSPACE catalog WITH REPLICATION = { 'class' : 'NetworkTopologyStrategy','DC1' : 3};

USE catalog;

CREATE TABLE user_data (
    first_name          text,
    last_name           text,
    address             text,
    picture_location    text,
    PRIMARY KEY( (first_name, last_name) )
);

INSERT INTO user_data ("first_name","last_name","address","picture_location") VALUES ('Bob','Loblaw','1313 Mockingbird Lane', 'http://www.facebook.com/bobloblaw') ;
INSERT INTO user_data ("first_name","last_name","address","picture_location") VALUES ('Bob','Zemuda','1202 Coffman Lane', 'http://www.facebook.com/bzemuda') ;
INSERT INTO user_data ("first_name","last_name","address","picture_location") VALUES ('Jim','Jeffries','1211 Hollywood Lane', 'http://www.facebook.com/jeffries') ;

CREATE KEYSPACE tracking WITH REPLICATION = { 'class' : 'NetworkTopologyStrategy','DC1' : 3};

USE tracking;

CREATE TABLE user_tracking_data (
    first_name          text,
    last_name           text,
    created_at          timestamp,
    location            varchar,
    speed               double,
    heat                double,
    telepathy_powers    int,
    primary key( (first_name, last_name), created_at )
) WITH CLUSTERING ORDER BY ( created_at DESC )
AND COMPACTION = {'class': 'DateTieredCompactionStrategy', 'base_time_seconds': 3600, 'max_sstable_age_days': 1};


 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Jim','Jeffries','2017-11-11 08:05+0000','New York',1.0,3.0,17) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Jim','Jeffries','2017-11-11 09:05+0000','New York',2.0,4.0,27) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Jim','Jeffries','2017-11-11 10:05+0000','New York',3.0,5.0,37) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Jim','Jeffries','2017-11-11 10:22+0000','New York',4.0,12.0,47) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Jim','Jeffries','2017-11-11 11:05+0000','New York',4.0,9.0,87) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Jim','Jeffries','2017-11-11 12:05+0000','New York',4.0,24.0,57) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Bob','Loblaw','2017-11-11 08:05+0000','Cincinnati',2.0,6.0,5) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Bob','Loblaw','2017-11-11 09:05+0000','Cincinnati',4.0,1.0,10) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Bob','Loblaw','2017-11-11 10:05+0000','Cincinnati',6.0,1.0,15) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Bob','Loblaw','2017-11-11 10:22+0000','Cincinnati',8.0,3.0,6) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Bob','Loblaw','2017-11-11 11:05+0000','Cincinnati',10.0,2.0,3) ;
 INSERT INTO tracking.user_tracking_data ("first_name","last_name","created_at","location","speed","heat","telepathy_powers") VALUES ('Bob','Loblaw','2017-11-11 12:05+0000','Cincinnati',12.0,10.0,60) ;


-- Chat App 스키마 및 초기 데이터 샘플

-- 1. 키스페이스 생성 (3개의 노드에 데이터 복제를 위해 replication_factor는 3으로 설정)
CREATE KEYSPACE IF NOT EXISTS chat_app
WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'};

-- 2. 생성한 키스페이스 사용
USE chat_app;

-- 3. 테이블 생성

-- (1) 클라이언트 정보 테이블: 각 클라이언트(사용자)를 식별
CREATE TABLE IF NOT EXISTS clients (
    client_id uuid PRIMARY KEY,
    client_name text,
    registered_at timestamp
);

-- (2) 대화 세션 테이블: 각 대화(컨텍스트)를 저장. 각 대화는 특정 클라이언트와 연관됩니다.
CREATE TABLE IF NOT EXISTS conversations (
    conversation_id uuid PRIMARY KEY,
    client_id uuid,
    topic text,
    started_at timestamp,
    last_updated timestamp
);

-- (3) 메시지 테이블: 각 대화(session)에 대한 메시지 내역을 시간 순으로 저장
CREATE TABLE IF NOT EXISTS messages (
    conversation_id uuid,
    message_id timeuuid,
    sender text,
    content text,
    created_at timestamp,
    PRIMARY KEY (conversation_id, message_id)
) WITH CLUSTERING ORDER BY (message_id ASC);

-- 4. 초기 데이터 삽입
-- 샘플 데이터에서는 고정된 UUID를 사용합니다.
-- 실제 운영 시에는 애플리케이션에서 동적으로 UUID를 생성하는 것이 좋습니다.

-- 클라이언트 데이터 삽입
INSERT INTO clients (client_id, client_name, registered_at) VALUES (11111111-1111-1111-1111-111111111111, 'Alice', toTimestamp(now()));
INSERT INTO clients (client_id, client_name, registered_at) VALUES (22222222-2222-2222-2222-222222222222, 'Bob', toTimestamp(now()));

-- 대화 세션 데이터 삽입 (예: Alice가 시작한 대화)
INSERT INTO conversations (conversation_id, client_id, topic, started_at, last_updated) VALUES (33333333-3333-3333-3333-333333333333, 11111111-1111-1111-1111-111111111111, 'General Chat', toTimestamp(now()), toTimestamp(now()));

-- 메시지 데이터 삽입
-- Alice가 보낸 첫 메시지
INSERT INTO messages (conversation_id, message_id, sender, content, created_at) VALUES (33333333-3333-3333-3333-333333333333, now(), 'Alice', 'Hello, how are you?', toTimestamp(now()));

-- Bob이 보낸 응답 메시지
INSERT INTO messages (conversation_id, message_id, sender, content, created_at) VALUES (33333333-3333-3333-3333-333333333333, now(), 'Bob', 'I am fine, thank you!', toTimestamp(now()));

